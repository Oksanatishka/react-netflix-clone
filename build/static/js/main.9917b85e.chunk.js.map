{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","console","table","className","map","movie","key","id","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","err","log","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kWAQeA,E,OAJEC,EAAMC,OAAO,CAC1BC,QAAS,iC,iCCsEEC,EAnEH,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,WAAiB,EACjBC,mBAAS,IADQ,mBACtCC,EADsC,KAC9BC,EAD8B,OAETF,mBAAS,IAFA,mBAEtCG,EAFsC,KAE1BC,EAF0B,KAK7CC,qBAAU,WAAM,4CAEZ,4BAAAC,EAAA,sEAC0Bb,EAAMc,IAAIT,GADpC,cACUU,EADV,OAGIN,EAAUM,EAAQC,KAAKC,SAH3B,kBAIWF,GAJX,4CAFY,0DAQZG,KAED,CAACb,IAEJc,QAAQC,MAAMZ,GA0Bd,OACI,yBAAKa,UAAU,OAEX,4BAAKjB,GAEL,yBAAKiB,UAAU,gBAEVb,EAAOc,KAAI,SAACC,GAAD,OACR,yBACIC,IAAKD,EAAME,GACXC,QAAS,kBAxBT,SAACH,GACbb,EACAC,EAAc,IAEdgB,KAAkB,OAALJ,QAAK,IAALA,OAAA,EAAAA,EAAOK,OAAQ,IACvBC,MAAK,SAACC,GAEH,IAAMC,EAAY,IAAIC,gBAAgB,IAAIC,IAAIH,GAAKI,QACnDvB,EAAcoB,EAAUjB,IAAI,SAE/BqB,OAAM,SAACC,GAAD,OAASjB,QAAQkB,IAAID,MAcLE,CAAYf,IAC3BF,UAAS,sBAAiBf,GAAc,oBACxCiC,IAAG,UAzDV,wCAyDU,OAAgBjC,EAAaiB,EAAMiB,YAAcjB,EAAMkB,eAC1DC,IAAKnB,EAAMK,WAKtBlB,GAAc,kBAAC,IAAD,CAASiC,QAASjC,EAAYkC,KAzCxC,CACTC,OAAQ,MACRC,MAAO,OACPC,WAAY,CAERC,SAAU,QChChBC,EAAU,mCAcDC,EAVE,CACbC,cAAc,8BAAD,OAAgCF,EAAhC,mBACbG,sBAAsB,wBAAD,OAA0BH,EAA1B,sBACrBI,cAAc,4BAAD,OAA8BJ,EAA9B,mBACbK,kBAAkB,2BAAD,OAA6BL,EAA7B,mBACjBM,kBAAkB,2BAAD,OAA6BN,EAA7B,mBACjBO,kBAAkB,2BAAD,OAA6BP,EAA7B,mBACjBQ,mBAAmB,2BAAD,OAA6BR,EAA7B,sBAClBS,mBAAmB,2BAAD,OAA6BT,EAA7B,oBCwCPU,G,MAhDA,WAAO,IAgBAC,EAAKC,EAhBN,EACStD,mBAAS,IADlB,mBACVgB,EADU,KACHuC,EADG,KAoBjB,OAlBAlD,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,sEAC0Bb,EAAMc,IAAIoC,EAASE,uBAD7C,cACUrC,EADV,OAEI+C,EACI/C,EAAQC,KAAKC,QAAQ8C,KAAKC,MAAMD,KAAKE,SAAWlD,EAAQC,KAAKC,QAAQiD,OAAS,KAHtF,kBAKWnD,GALX,4CADY,uBAAC,WAAD,wBASZG,KACD,IAEHC,QAAQkB,IAAId,GAOR,4BACIF,UAAU,SACV8C,MAAO,CACHC,eAAgB,QAChBC,gBAAgB,4CAAD,cAA8C9C,QAA9C,IAA8CA,OAA9C,EAA8CA,EAAOkB,cAArD,MACf6B,mBAAoB,kBAGxB,yBAAKjD,UAAU,oBAGX,wBAAIA,UAAU,kBACJ,OAALE,QAAK,IAALA,OAAA,EAAAA,EAAOnB,SAAP,OAAgBmB,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAOK,QAAvB,OAA+BL,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAOgD,gBAG3C,yBAAKlD,UAAU,mBACX,4BAAQA,UAAU,kBAAlB,QACA,4BAAQA,UAAU,kBAAlB,YAGJ,wBAAIA,UAAU,wBAzBRuC,EAyBuC,OAACrC,QAAD,IAACA,OAAD,EAACA,EAAOiD,SAzB1CX,EAyBoD,KAxB7D,OAAHD,QAAG,IAAHA,OAAA,EAAAA,EAAKM,QAASL,EAAID,EAAIa,OAAO,EAAGZ,EAAI,GAAK,MAAQD,KA0BpD,yBAAKvC,UAAU,0BCbZqD,G,MAhCH,WAAO,IAAD,EACanE,oBAAS,GADtB,mBACPoE,EADO,KACDC,EADC,KAed,OAZAhE,qBAAU,WAQN,OAPAiE,OAAOC,iBAAiB,UAAU,WAC1BD,OAAOE,QAAU,IACjBH,GAAW,GAEXA,GAAW,MAGZ,WACHC,OAAOG,oBAAoB,aAEhC,IAEC,yBAAK3D,UAAS,cAASsD,GAAQ,eAC3B,yBACItD,UAAU,YACVkB,IAAI,4EACJG,IAAI,iBAER,yBACIrB,UAAU,cAEVkB,IAAI,0FACJG,IAAI,oBCALuC,MAtBf,WACI,OACI,yBAAK5D,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CACIjB,MAAM,oBACNC,SAAU6C,EAASE,sBACnB9C,YAAY,IAEhB,kBAAC,EAAD,CAAKF,MAAM,eAAeC,SAAU6C,EAASC,gBAE7C,kBAAC,EAAD,CAAK/C,MAAM,YAAYC,SAAU6C,EAASG,gBAC1C,kBAAC,EAAD,CAAKjD,MAAM,gBAAgBC,SAAU6C,EAASI,oBAC9C,kBAAC,EAAD,CAAKlD,MAAM,gBAAgBC,SAAU6C,EAASK,oBAC9C,kBAAC,EAAD,CAAKnD,MAAM,gBAAgBC,SAAU6C,EAASM,oBAC9C,kBAAC,EAAD,CAAKpD,MAAM,iBAAiBC,SAAU6C,EAASO,qBAC/C,kBAAC,EAAD,CAAKrD,MAAM,gBAAgBC,SAAU6C,EAASQ,uBCZtCwB,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhE,MAAK,SAAAiE,GACJA,EAAaC,gBAEd5D,OAAM,SAAA6D,GACL7E,QAAQ6E,MAAMA,EAAMC,c","file":"static/js/main.9917b85e.chunk.js","sourcesContent":["import axios from 'axios';\n\n// base url to make requests to the movie db\n// e.g. https://api.themoviedb.org/3/trending/all/week?api_key=${API_KEY}&language=en-US\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n});\n\nexport default instance;\n","import React, { useEffect, useState } from 'react';\nimport axios from './axios';\nimport './Row.css';\nimport Youtube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\n\nconst base_url = 'https://image.tmdb.org/t/p/original/';\n\nconst Row = ({ title, fetchUrl, isLargeRow }) => {\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState('');\n\n    // A snippet of code which runs based on a specific condition\n    useEffect(() => {\n        // if [], run once when the row loads, and don't run again\n        async function fetchData() {\n            const request = await axios.get(fetchUrl);\n            // console.log(request.data.results);\n            setMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n        // whenever you use anything inside of a useEffect if there is any variable that is being pulled in from outside but it's used inside of the useEffect you have to include it inside of here []. The reason being is because it's dependent on that variable so it's now a dependency.\n    }, [fetchUrl]);\n\n    console.table(movies);\n    // key - if anything changes in that row react doesn't simply re-render the entire row it just re-renders what it needs to re-render\n\n    const opts = {\n        height: '390',\n        width: '100%',\n        playerVars: {\n            // https://developers.google.com/youtube/player_parameters\n            autoplay: 1,\n        },\n    };\n\n    const handleClick = (movie) => {\n        if (trailerUrl) {\n            setTrailerUrl('');\n        } else {\n            movieTrailer(movie?.name || '')\n                .then((url) => {\n                    // e.g. https://www.youtube.com/watch?v=3Ct6zuHYDtY --> v=3Ct6zuHYDtY\n                    const urlParams = new URLSearchParams(new URL(url).search);\n                    setTrailerUrl(urlParams.get('v'));\n                })\n                .catch((err) => console.log(err));\n        }\n    };\n\n    return (\n        <div className=\"row\">\n            {/* title */}\n            <h2>{title}</h2>\n            {/* container -> posters */}\n            <div className=\"row__posters\">\n                {/* several row_poster(s) */}\n                {movies.map((movie) => (\n                    <img\n                        key={movie.id}\n                        onClick={() => handleClick(movie)}\n                        className={`row__poster ${isLargeRow && 'row__posterLarge'}`}\n                        src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\n                        alt={movie.name}\n                    />\n                ))}\n            </div>\n\n            {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\n            {/* <Youtube videoId=\"XtMThy8QKqU\" opts={opts} /> */}\n        </div>\n    );\n};\n\nexport default Row;\n","// const API_KEY = '<YOUR_KEY>';\nconst API_KEY = 'b48ea4a688a9d8f286c89e50bf7e13c9';\n\n// e.g. https://api.themoviedb.org/3/trending/all/week?api_key=${API_KEY}&language=en-US\n// API Requests (Endpoinds)\nconst requests = {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\nexport default requests;\n","import React, { useEffect, useState } from 'react';\nimport './Banner.css';\nimport axios from './axios';\nimport requests from './requests';\n\nconst Banner = () => {\n    const [movie, setMovie] = useState([]);\n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(requests.fetchNetflixOriginals);\n            setMovie(\n                request.data.results[Math.floor(Math.random() * request.data.results.length - 1)]\n            );\n            return request;\n            // console.log(request.data.results[Math.floor(Math.random() * request.data.results.length - 1)]);\n        }\n        fetchData();\n    }, []);\n\n    console.log(movie);\n\n    function truncate(str, n) {\n        return str?.length > n ? str.substr(0, n - 1) + '...' : str;\n    }\n\n    return (\n        <header\n            className=\"banner\"\n            style={{\n                backgroundSize: 'cover',\n                backgroundImage: `url('https://image.tmdb.org/t/p/original/${movie?.backdrop_path}')`,\n                backgroundPosition: 'center center',\n            }}\n        >\n            <div className=\"banner__contents\">\n                {/* background image */}\n                {/* title */}\n                <h1 className=\"banner__title\">\n                    {movie?.title || movie?.name || movie?.original_name}\n                </h1>\n                {/* div > 2 buttons */}\n                <div className=\"banner__buttons\">\n                    <button className=\"banner__button\">Play</button>\n                    <button className=\"banner__button\">My List</button>\n                </div>\n                {/* description */}\n                <h1 className=\"banner__description\">{truncate(movie?.overview, 150)}</h1>\n            </div>\n            <div className=\"banner--fadeBottom\" />\n        </header>\n    );\n};\n\nexport default Banner;\n","import React, { useEffect, useState } from 'react';\nimport './Nav.css';\n\nconst Nav = () => {\n    const [show, handleShow] = useState(false);\n    // scroll listener\n    useEffect(() => {\n        window.addEventListener('scroll', () => {\n            if (window.scrollY > 100) {\n                handleShow(true);\n            } else {\n                handleShow(false);\n            }\n        });\n        return () => {\n            window.removeEventListener('scroll');\n        };\n    }, []);\n    return (\n        <div className={`nav ${show && 'nav__black'}`}>\n            <img\n                className=\"nav__logo\"\n                src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\n                alt=\"Netflix logo\"\n            />\n            <img\n                className=\"nav__avatar\"\n                // src=\"https://pbs.twimg.com/profile_images/124011999041155\"\n                src=\"https://mir-s3-cdn-cf.behance.net/project_modules/disp/366be133850498.56ba69ac36858.png\"\n                alt=\"Netflix logo\"\n            />\n        </div>\n    );\n};\n\nexport default Nav;\n","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from './Banner';\nimport Nav from './Nav';\n\nfunction App() {\n    return (\n        <div className=\"app\">\n            <Nav />\n            <Banner />\n            <Row\n                title=\"NETFLIX ORIGINALS\"\n                fetchUrl={requests.fetchNetflixOriginals}\n                isLargeRow={true}\n            />\n            <Row title=\"Trending now\" fetchUrl={requests.fetchTrending} />\n\n            <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n            <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n            <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n            <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n            <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n            <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}